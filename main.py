import os.path
import random
from datetime import datetime

import vk_api
from vk_api.utils import get_random_id

import info
import keyboards

try:
    os.mkdir('Pars')
    file = open('users.txt', 'w', encoding="utf-8")
    file.close()
    file = open('time_table.txt', 'w', encoding="utf-8")
    file.write(
        "0 0 0 0 0 0\n" + "0 0 0 0 0 0\n" + "0 0 0 0 0 0\n" + "0 0 0 0 0 0\n" +
        "0 0 0 0 0 0\n" + "0 0 0 0 0 0\n" + "0 0 0 0 0 0\n" + "0 0 0 0 0 0\n" +
        "0 0 0 0 0 0\n" + "0 0 0 0 0 0\n" + "0 0 0 0 0 0\n" + "0 0 0 0 0 0\n" +
        "0 0 0 0 0 0\n" + "0 0 0 0 0 0\n" + "0 0 0 0 0 0\n" + "0 0 0 0 0 0\n"
    )
    file.close()
    print('dir created')
except:
    print('dir found')

from vk_api.longpoll import VkLongPoll, VkEventType

vk_session = vk_api.VkApi(token=info.token)
Lslongpoll = VkLongPoll(vk_session)
Lsvk = vk_session.get_api()

users = {}
start_day = datetime.fromisoformat('2022-08-29')
time_table = []
day = 0
par = 0
current_queue = []
addition_queue = {}
loaded_queue = []
is_break = True
stage = False


# 0 - wait
# 1 - break
# 2 - lesson


def next():
    global current_queue
    send_message_key(current_queue[0],
                     "–ü–∞—Ä—Ç–∏—è –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π",
                     keyboards.par().get_keyboard())
    current_queue.pop(0)
    if len(current_queue) > 1:
        send_message(current_queue[1], "–¢—ã —Å–ª–µ–¥—É—é—â–∏–π, –≥–æ—Ç–æ–≤—å—Å—è")
    if len(current_queue) > 0:
        send_message_key(current_queue[0],
                         "–¢–≤–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏—à–ª–æ, –∫–∞–∫ –∑–∞–∫–æ–Ω—á–∏—à—å - –Ω–∞–∂–º–∏ –≥–æ—Ç–æ–≤–æ",
                         keyboards.current_player().get_keyboard())


def message_distribution(message):
    global Lsvk
    for i in users.keys():
        Lsvk.messages.send(
            user_id=i,
            random_id=get_random_id(),
            message=message
        )
        # vk_session.method('messages.send', {'user_id': i, 'message': message, 'random_id': 0})
    print("Message distribution: " + message)


def message_distribution_key(message, keyboard):
    global Lsvk
    for i in users.keys():
        Lsvk.messages.send(
            user_id=i,
            random_id=get_random_id(),
            keyboard=keyboard,
            message=message
        )
        # vk_session.method('messages.send', {'user_id': i, 'message': message, 'random_id': 0})
    print("Message distribution: " + message)


def send_message_key(user_id, message, keyboard):
    global Lsvk
    Lsvk.messages.send(
        user_id=user_id,
        random_id=get_random_id(),
        keyboard=keyboard,
        message=message
    )
    # vk_session.method('messages.send', {'user_id': user_id, 'message': message, 'random_id': 0})


def send_message(user_id, message):
    global Lsvk
    Lsvk.messages.send(
        user_id=user_id,
        random_id=get_random_id(),
        message=message
    )
    # vk_session.method('messages.send', {'user_id': user_id, 'message': message, 'random_id': 0})


def get_loaded():
    global users
    global current_queue
    out = ""
    counter = 1
    for i in loaded_queue:
        try:
            out += str(counter) + ". " + users[i] + "\n"
        except:
            out += str(counter) + ". " + "–ß–µ–ª —Å vk id: " + str(i) + ", —Å–¥–µ–ª–∞–≤—à–∏–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ.\n"
        counter += 1
    return out


def get_queue():
    global users
    global current_queue
    out = ""
    counter = 1
    for i in current_queue:
        try:
            out += str(counter) + ". " + users[i] + "\n"
        except:
            out += str(counter) + ". " + "–ß–µ–ª —Å vk id: " + str(i) + ", —Å–¥–µ–ª–∞–≤—à–∏–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ.\n"
        counter += 1
    for i in addition_queue.keys():
        out += users[i] + " –∑–∞ " + users[addition_queue[i]] + "\n"
    return out


def load_time_table():
    global time_table
    time_table = []
    file = open('time_table.txt', 'r', encoding="utf-8")
    for day in range(14):
        table = []
        time_table.append(file.readline()[:-1].split())
    file.close()


def load_users():
    global users
    file = open('users.txt', 'r', encoding="utf-8")
    out = file.readlines()
    for i in out:
        n = i.split(" ")
        users[int(n[0])] = i[len(n[0]) + 1:-1]
    file.close()


def add_user(user_id, user_name):
    global users
    keys = users.keys()
    if user_id not in keys:
        file = open('users.txt', 'a', encoding="utf-8")
        file.write(str(user_id) + " " + user_name + "\n")
        file.close()
        users[user_id] = user_name
    # else:


def save_current_queue():
    global time_table
    global day
    global current_queue
    file = open("Pars/" + time_table[day][par - 1] + '.txt', 'w', encoding="utf-8")
    for i in current_queue:
        file.write(str(i) + "\n")
    file.close()


def load_queue():
    global time_table
    global day
    global loaded_queue
    global current_queue
    try:
        file = open("Pars/" + time_table[day][par - 1] + '.txt', 'r', encoding="utf-8")
    except:
        file = open("Pars/" + time_table[day][par - 1] + '.txt', 'w', encoding="utf-8")
        file.close()
        file = open("Pars/" + time_table[day][par - 1] + '.txt', 'r', encoding="utf-8")
    loaded_queue = [int(i[:-1]) for i in file.readlines()]
    file.close()
    current_queue = []


def shuffle_queue():
    global loaded_queue
    global current_queue
    global addition_queue
    new_queue = []
    for i in loaded_queue:
        if i in current_queue:
            new_queue.append(i)
    random.shuffle(current_queue)
    for i in current_queue:
        if i not in new_queue:
            new_queue.append(i)
    for i in list(addition_queue.keys())[::-1]:
        new_queue.insert(new_queue.index(addition_queue[i]) + 1, i)
    loaded_queue = []
    current_queue = new_queue
    addition_queue = {}

    message = "–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞, —Ç–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:\n" + get_queue()
    keyboard = keyboards.in_queue().get_keyboard()
    global Lsvk
    message_distribution(message)
    for i in current_queue:
        Lsvk.messages.send(
            user_id=i,
            random_id=get_random_id(),
            keyboard=keyboard,
            message="–¢—ã –≤ –æ—á–µ—Ä–µ–¥–∏, –†–∞–Ω–¥–æ–º –≤—ã–±—Ä–∞–ª —Ç–µ–±–µ –º–µ—Å—Ç–æ."
        )

    if len(current_queue) > 1:
        send_message(current_queue[1], "–í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ –ø–æ –≤–µ–∑–µ–Ω–∏—é, —Ç—ã —Å–ª–µ–¥—É—é—â–∏–π, –≥–æ—Ç–æ–≤—å—Å—è")
    if len(current_queue) > 0:
        send_message_key(current_queue[0], "–†–∞–Ω–¥–æ–º –≤—Å–µ–≤—ã—à–Ω–∏–π, —Ç—ã –ø–µ—Ä–≤—ã–π, –≤–ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—á–∞—Ç—å! –ö–∞–∫ –∑–∞–∫–æ–Ω—á–∏—à—å, –∂–º–∏ –Ω–∞ –≥–æ—Ç–æ–≤–æ.",
                         keyboards.current_player().get_keyboard())


def update_stage():
    global day
    global par
    global is_break
    delta = datetime.now() - start_day
    day = delta.days % len(time_table)
    time = delta.seconds // 60
    print("time: " + str(time / 60))
    l_par = 0
    l_is_break = 0
    if time < 8 * 60 + 30:
        l_par = 0
        l_is_break = True
    elif time < 9 * 60:
        l_par = 1
        l_is_break = True
    elif time < 10 * 60 + 30:
        l_par = 1
        l_is_break = False
    elif time < 10 * 60 + 40:
        l_par = 2
        l_is_break = True
    elif time < 12 * 60 + 10:
        l_par = 2
        l_is_break = False
    elif time < 12 * 60 + 40:
        l_par = 3
        l_is_break = True
    elif time < 14 * 60 + 10:
        l_par = 3
        l_is_break = False
    elif time < 14 * 60 + 20:
        l_par = 4
        l_is_break = True
    elif time < 15 * 60 + 50:
        l_par = 4
        l_is_break = False
    elif time < 16 * 60 + 20:
        l_par = 5
        l_is_break = True
    elif time < 17 * 60 + 50:
        l_par = 5
        l_is_break = False
    elif time < 18 * 60:
        l_par = 6
        l_is_break = True
    elif time < 19 * 60 + 30:
        l_par = 6
        l_is_break = False
    else:
        l_par = 7
        l_is_break = True

    if (l_par != 0 and par != 7) or not is_break:
        if par != l_par:
            print(str(day) + ", " + str(par) + ", " + str(l_par))
            if par > 0 and time_table[day][par - 1] != "0":
                save_current_queue()
                message_distribution_key("–û—á–µ—Ä–µ–¥—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –ù–∞ –º–æ–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –Ω–µ–π –±—ã–ª–∏:\n" + get_queue(),
                                         keyboards.in_queue().get_keyboard())
            par = l_par
            if 1 < par < 7 and time_table[day][par - 1] == time_table[day][par - 2]:
                # message_distribution_key("–ú–µ–∂–¥—É –ø–µ—Ä–≤–æ–π –∏ –≤—Ç–æ—Ä–æ–π, –ø–µ—Ä–µ—Ä—ã–≤—á–∏–∫ –Ω–µ–±–æ–ª—å—à–æ–π. –ê –¥–ª—è –∫–æ–≥–æ-—Ç–æ –æ–ø—è—Ç—å " +
                #                         time_table[day][par - 2] + " –∏ –Ω–∏–∫–∞–∫–∏—Ö –ø–µ—Ä–µ—Ä—ã–≤–æ–≤",
                #                         keyboards.par().get_keyboard())
                is_break = False
            elif 0 < par < 7:
                if time_table[day][par - 1] != "0":
                    load_queue()
                    message_distribution_key("–ù–æ–≤–∞—è –æ—á–µ—Ä–µ–¥—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É \"" +
                                             time_table[day][par - 1] +
                                             "\" —É—Å–ø–µ–π –∑–∞–ø–∏—Å–∞—Ç—Å—è –¥–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã, –µ—Å–ª–∏ —Ç—ã —Å–¥–µ–ª–∞–ª –∫–æ–Ω–µ—á–Ω–æ,"
                                             " –∞ –µ—Å–ª–∏ –Ω–µ —Å–¥–µ–ª–∞–ª, –Ω–µ –±—É–¥—å ü§°, –¥–æ–¥–µ–ª–∞–µ—à—å - –∑–∞–ø–∏—à–µ—à—å—Å—è."
                                             "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∑–∞ –¥—Ä—É–≥–æ–º, –Ω–∞–ø–∏—à–∏ \"—è –∑–∞ N\" N-–Ω–æ–º–µ—Ä"
                                             " —Ç–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞ –≤ –æ—á–µ—Ä–µ–¥–∏. –°–ø–∏—Å–æ–∫ —Å –ø—Ä–æ—à–ª–æ–π –ø–∞—Ä—ã:\n" + get_loaded(),
                                             keyboards.par().get_keyboard())
                    for i in loaded_queue:
                        send_message_key(i, "–¢—ã –æ—Å—Ç–∞–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ —Å –ø—Ä–æ—à–ª–æ–π –ø–∞—Ä—ã, –µ—Å–ª–∏ —Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ —É—Å–ø–µ–ª —Å–¥–∞—Ç—å,"
                                            " –∑–∞–ø–∏—à–∏—Å—å –Ω–∞ —ç—Ç—É —Ç–æ–∂–µ, —Ç–≤–æ—è –∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ, –∞ –µ—Å–ª–∏ —É—Å–ø–µ–ª —Å–¥–∞—Ç—å"
                                            " –∏–ª–∏ —Å–¥–∞–ª –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—Ä—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–Ø –•–æ—Ä–æ—à\"",
                                         keyboards.loaded().get_keyboard())
                is_break = l_is_break
            else:
                is_break = l_is_break
        elif is_break != l_is_break:
            if 1 < par < 7 and time_table[day][par - 1] == time_table[day][par - 2]:
                is_break = False
            else:
                shuffle_queue()
                is_break = l_is_break
            par = l_par
        else:
            par = l_par
            is_break = l_is_break
    elif par == 7 and is_break != l_is_break:
        print(str(day) + ", " + str(par - 1))
        if time_table[day][par - 2] != "0":
            save_current_queue()
        par = l_par
        is_break = l_is_break
    else:
        par = l_par
        is_break = l_is_break


load_time_table()
load_users()
print(users)
print(time_table)
"116399612"

while True:
    update_stage()

    print("users: " + str(users))
    print("start_day: " + str(start_day))
    print("time_table: " + str(time_table))
    print("day: " + str(day))
    print("par: " + str(par))
    print("current_queue: " + str(current_queue))
    print("loaded_queue: " + str(loaded_queue))
    print("addition_queue: " + str(addition_queue))
    print("is_break: " + str(is_break))
    print("stage: " + str(stage))

    events = Lslongpoll.check()

    # –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ check
    if Lslongpoll.preload_messages:
        Lslongpoll.preload_message_events_data(events)

    for event in events:
        if event.type == VkEventType.MESSAGE_NEW and event.to_me and event.text:
            if event.from_user:
                text = event.text.lower()
                if text[0:3] == "—Ñ–∏–æ":
                    if len(event.text[4:].split(" ")) < 2:
                        send_message(event.user_id, "–î—Ä—É–∂–∏—â–µ, —Ç—ã –∑–∞–±—ã–ª –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–º–∏–ª–∏—é –ò –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã —Ñ–∏–æ."
                                                    " –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: \"—Ñ–∏–æ –ö–ª–æ—É–Ω–æ–≤ –ï–≥–æ—Ä\"")
                    else:
                        add_user(event.user_id, event.text[4:])
                        if 0 < par < 6 and time_table[day][par - 1] != "0":
                            send_message_key(event.user_id,
                                             event.text[4:] + " –†–∞—Å—Å—Ç—Ä–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω.",
                                             keyboards.par().get_keyboard())
                        else:
                            send_message(event.user_id, event.text[4:] + " –†–∞—Å—Å—Ç—Ä–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω.")
                elif event.user_id not in users:
                    send_message(event.user_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –§–ò–û –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã —Ñ–∏–æ."
                                                " –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: \"—Ñ–∏–æ –†–µ—É–∫–æ–≤ –í–∞—Å–∏–ª–∏–π\"")
                elif 0 < par <= 6 and time_table[day][par - 1] != "0":
                    # if not is_break:
                    print(text)
                    if text == "–æ—á–µ—Ä–µ–¥—å":
                        if len(current_queue) > 0:
                            send_message(event.user_id, get_queue())
                        else:
                            send_message(event.user_id, "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, —É —Ç–µ–±—è –µ—Å—Ç—å —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º!")
                    elif text == "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è":
                        print(event.user_id)
                        if event.user_id not in current_queue and event.user_id not in addition_queue:
                            current_queue.append(event.user_id)
                            if is_break:
                                send_message_key(event.user_id, "–¢—ã –∑–∞–ø–∏—Å–∞–Ω, —Ö–æ—Ä–æ—à–µ–≥–æ —Ç–µ–±–µ –ø–µ—Ä–µ—Ä—ã–≤–∞",
                                                 keyboards.in_queue_break().get_keyboard())
                            else:
                                send_message_key(event.user_id, "–¢—ã –∑–∞–ø–∏—Å–∞–Ω", keyboards.in_queue().get_keyboard())
                            if not is_break:
                                if current_queue[0] == event.user_id:
                                    send_message_key(current_queue[0],
                                                     "–£–∂–µ –ø–µ—Ä–≤—ã–π? —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞—Å–ª—É–∂–∏–≤–∞—é—â–∞—è —É–≤–∞–∂–µ–Ω–∏—è –∏–¥–∏ –æ—Ç–≤–µ—á–∞–π,"
                                                     " –∫–∞–∫ –∑–∞–∫–æ–Ω—á–∏—à—å - –Ω–∞–∂–º–∏ –≥–æ—Ç–æ–≤–æ",
                                                     keyboards.current_player().get_keyboard())
                                elif len(current_queue) > 1 and current_queue[1] == event.user_id:
                                    send_message(current_queue[1], "–¢–æ–ª—å–∫–æ –∑–∞—à–µ–ª –∏ —Å—Ä–∞–∑—É –≤—Ç–æ—Ä–æ–π, –≥–æ—Ç–æ–≤—å—Å—è")
                        elif event.user_id in addition_queue:
                            send_message(event.user_id, "–¢—ã —Ö–≤–æ—Å—Ç–∏–∫–æ–º –∑–∞ " + users[addition_queue[event.user_id]] +
                                         ". –ù–µ –≤–æ–ª–Ω—É–π—Å—è, –∫–∞–∫ –Ω–∞—á–Ω–µ—Ç—Å—è –ø–∞—Ä–∞ —Ç—ã –ø–æ—è–≤–∏—à—å—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏.")
                        else:
                            send_message(event.user_id, "–ê—Å—Ç–∞–Ω–∞–≤–∏—Å—å, —Ç—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏")
                    elif text == "–≤—ã–ø–∏—Å–∞—Ç—å—Å—è":
                        if event.user_id in current_queue:
                            if not is_break:
                                if len(current_queue) > 2 and current_queue[1] == event.user_id:
                                    send_message(current_queue[2], "–¢—É—Ç –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Å–∫–∏–ø–∞—é—Ç,"
                                                                   " —Ç—ã —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–ø–µ—Ä—å, –≥–æ—Ç–æ–≤—å—Å—è")
                                current_queue.remove(event.user_id)
                                send_message_key(event.user_id, "–¢—ã —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏.", keyboards.par().get_keyboard())
                            else:
                                send_message_key(event.user_id,
                                                 "–î—Ä—É–∂–∏—â–µ, –ø–æ–¥–æ–∂–¥–∏, –Ω–µ –≤–∏–¥–∏—à—å - –æ—á–µ—Ä–µ–¥—å –µ—â–µ –Ω–µ –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞.",
                                                 keyboards.par().get_keyboard())
                        else:
                            send_message(event.user_id, "–¢—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –∑–∞–ø–∏—Å–∞–ª—Å—è –∑–∞ –∫–µ–º-—Ç–æ,"
                                                        " –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤—ã–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã")
                    if is_break:
                        if text[:4] == "—è –∑–∞":
                            if event.user_id not in current_queue:
                                try:
                                    id = int(text[5:].split(" ")[0]) - 1
                                    if len(current_queue) > id >= 0:
                                        if current_queue[id] not in loaded_queue:
                                            addition_queue[event.user_id] = current_queue[id]
                                            send_message(event.user_id, "–¢—ã –∑–∞–ø–∏—Å–∞–ª—Å—è –∑–∞ " + users[current_queue[id]] +
                                                         ", —Ç–µ–ø–µ—Ä—å —Ç—ã –µ–≥–æ —Ö–≤–æ—Å—Ç–∏–∫, –Ω–µ –æ—Ç–≤–µ—Ä—Ç–∏—à—å—Å—è.")
                                        else:
                                            send_message(event.user_id, "–¢–≤–æ–π –¥—Ä—É–≥ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏"
                                                                        ", –æ–Ω –Ω–µ —É—Å–ø–µ–ª –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø—Ä–æ—à–ª–æ–π –ø–∞—Ä–µ,"
                                                                        " —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—Å—è —Å –Ω–∏–º."
                                                                        " –ó–∞–ø–∏—à–∏—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã \"–∑–∞–ø–∏—Å–∞—Ç—å—Å—è\","
                                                                        " –µ—Å–ª–∏ –≤—ã –±—ã–ª–∏ –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–∂–∫–æ–π –Ω–∞ –ø—Ä–æ—à–ª–æ–π –ø–∞—Ä–µ"
                                                                        " (–Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ —É—Å–ø–µ–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å)"
                                                                        " –≤–∞—Å –ø–æ—Å—Ç–∞–≤–∏—Ç —Ç–∞–∫-–∂–µ –Ω–∞ —ç—Ç–æ–π")
                                except:
                                    send_message(event.user_id, "–ù–µ –ø—ã—Ç–∞–π—Å—è —Å–ª–æ–º–∞—Ç—å –±–æ—Ç–∞,"
                                                                " –æ–Ω –º–æ–∂–µ—Ç —Å–ª—É—á–∞–π–Ω–æ –æ–∫–∞–∑–∞—Ç—å—Å—è –°–∫–∞–π–Ω–µ—Ç–æ–º.")
                            else:
                                send_message(event.user_id, "–¢—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏, —Ö–æ—á–µ—à—å –∑–∞ –∫–µ–º-—Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?"
                                                            " –ê –≤—Å–µ, –Ω–∞–¥–æ –±—ã–ª–æ —Å–Ω–∞—á–∞–ª–∞ –¥—É–º–∞—Ç—å –ø–æ—Ç–æ–º –¥–µ–ª–∞—Ç—å.")
                        elif text[:7] == "—è —Ö–æ—Ä–æ—à":
                            if event.user_id in loaded_queue:
                                send_message_key(event.user_id,
                                                 "–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ä–æ—à! –ü–∞—Ä—Ç–∏—è –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π! –ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å!",
                                                 keyboards.par().get_keyboard())
                                loaded_queue.remove(event.user_id)
                            else:
                                send_message_key(event.user_id,
                                                 "–ë–æ—Ä—è, –ø—Ä–µ–∫—Ä–∞—â–∞–π!",
                                                 keyboards.par().get_keyboard())
                    else:
                        if text == "–≥–æ—Ç–æ–≤–æ":
                            if len(current_queue) > 0 and event.user_id == current_queue[0]:
                                next()
                        elif text[:4] == "—è –∑–∞":
                            send_message(event.user_id, "–î—Ä—É–∂–æ–∫, –ø–∞—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å,"
                                                        " –∫–ª—É–± –ª—é–±–∏—Ç–µ–ª–µ–π –æ–ø–∞–∑–¥—ã–≤–∞—Ç—å –≤ –∫–æ–Ω—Ü–µ –æ—á–µ—Ä–µ–¥–∏")
                else:
                    send_message(event.user_id, "–ù–µ –¥—É—à–Ω–∏, —è –æ—Ç–¥—ã—Ö–∞—é")
